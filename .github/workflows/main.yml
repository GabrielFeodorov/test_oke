name: "OCI Terraform"

on:
  push:
    branches: ["main"]
  pull_request:

env:
  TF_VAR_tenancy_id: ${{ secrets.TENANCY_IDN}}
  TF_VAR_compartment_id: ${{ secrets.COMPARTMENT_ID }}
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
  TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}


permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: self-hosted
    environment: test_oke # Update the name of the environment

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.12

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
